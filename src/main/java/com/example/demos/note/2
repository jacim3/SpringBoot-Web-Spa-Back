 * 호스트는 네트워크에 연결하기 위하여 네트워크에 연결된 컴퓨터 혹은 그 외의 장치를 의미
 * 노드는 네트워크상에 존재하는 모든 장치를 의미
 즉 네트워크를 이용하기 위해 주소가 할당된 노드 = 호스트

 * 클라이언트는 네트워크 상 요청하는 호스트를 의미
 * 서버는 요청에 응답할 수 있는 호스트로서, 요청하는 장치는 호스트, 요청에 응답하는 장치는 서버가 된다.
 서버란 지정된 포트에 소켓을 열고, 클라이언트가 연결할 때 까지 무한 대기하며 기다리는 프로그램.
 이후 클라이언트가 연결되면, 해당 클라이언트 소켓에서 요청을 받아와 수행 이후 응답을 작성해 연결함.
 어떤 프로토콜을 사용하느냐에 따라 FTP 서버 혹은 HTTP 서버 등이 될 수 있다.

 정적 웹 서버란 HTTP 서버 중에서 리소스 파일을 리턴하는 서버로서, 해당 파일을 별도로 처리하지 않고 있는 그대로 리턴함.
 Apache or Nginx 가 있다.

 동적 웹 서버는 파일을 있는 그대로 리턴하는 대신, 요청을 처리한 후, 응답바디를 재구성 하거나 템플릿 파일에 결과를 대체하여 보냄.
 이러한 작업을 스프링은 서블릿이 도와주어 소켓프로그래밍, HTTP 파싱, 스레드 풀 관리등을 수행한다.

 기본적으로 HTTP 프로토콜 환경은 connectionless, stateless 특정을 가지므로, 클라이언트가 누구인지 항상 확인해야 한다.
 * connectionless
 클라이언트가 요청을 한 후 응답을 받으면 그 연결을 끊어 버리는 특징
 HTTP는 먼저 클라이언트가 request를 서버에 보내면, 서버는 클라이언트에게 요청에 맞는 response를 보내고 접속을 끊는 특성이 있다.
 헤더에 keep-alive라는 값을 줘서 커넥션을 재활용하는데 HTTP1.1에서는 이것이 디폴트다.
 HTTP가 tcp위에서 구현되었기 때문에 (tcp는 연결지향,udp는 비연결지향) 네트워크 관점에서 keep-alive는 옵션으로 connectionless의 연결비용을 줄이는 것을 장점으로 비연결지향이라 한다.
 * stateless
 통신이 끝나면 상태를 유지하지 않는 특징
 연결을 끊는 순간 클라이언트와 서버의 통신이 끝나며 상태 정보는 유지하지 않는 특성이 있다.
 쿠키와 세션은 위의 두 가지 특징을 해결하기 위해 사용합니다.
 예를 들어, 쿠키와 세션을 사용하지 않으면 쇼핑몰에서 옷을 구매하려고 로그인을 했음에도, 페이지를 이동할 때 마다 계속 로그인을 해야 합니다.
 쿠키와 세션을 사용했을 경우, 한 번 로그인을 하면 어떠한 방식에 의해서 그 사용자에 대한 인증을 유지하게 됩니다.
