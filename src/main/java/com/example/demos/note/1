/* * 레이어드 아키텍쳐 패턴 - 웹 어플리케이션 등에서 MVC 모델과 함께 사용되는 패턴. 하위 레이어가 제공하는 기능을 상위 레이어가 이용함으로써, 레이어의 구조를 단순화함.
   1. 프리젠테이션 레이어 (V / C) - 웹 브라우저를 통해 사용자의 입력을 받아, 비즈니스 레이어에 전달 및 처리결과를 다시 브라우저에 표시
   2. 비즈니스 레이어 - 필요에 따라 퍼시스턴스 레이어에를 통해 DB 작업처리 결과를 전달받으며, 이를 반환받아 비즈니스 로직을 작성
   3. 퍼시스턴스 레이어 (M) - 비즈니스 레이어와 DB를 중개하기 위한 레이어.*/

/* * REST 아키텍쳐 스타일 - 클라이언트(브라우저)가 서비스를 이용하려면, 어떤 형식으로 요청을 보내고 응답을 받는지
   이러한 아키텍쳐 스타일로 설계 및 구현된 서비스를 Restful Service라고 한다.
   1. 클라이언트-서버 : 리소스를 관리하는 서버가 존재하고, 다수의 클라이언트가 네트워크를 통해 서버에 접근하는 구조.
   2. 상태가 없음 : 클라이언트가 서버에 요청을 보낼 때, 이전 요청의 영향을 받지 않음을 의미.
      로그인 -> 다음페이지로 이동하는 경우는 서버가 이전 상태를 알고있어야 하므로 '상태가 있는' 아키텍쳐.
      그러므로, 상태가 없는 아키텍쳐는 서버에 요청을 하기위해 필요한 모든 데이터를 포함해야 한다
   3. 캐시되는 데이터 : 서버에서 리소스를 리턴 시, 캐시가 가능한지 여부를 명시할수 있어야 함.
   4. 일관적인 인터페이스 : 리소스를 요청하기 위한 URI 일관성 혹은, 리턴타입의 일관성(+충분한 정보)과 같이,
      URI 요청 응답, 요청형식 응답형식이 일관적이어야 한다.
   5. 레이어 시스템 : 클라이언트가 서버에 요청할 때, 여러개의 레이어로 된 서버를 거칠수 있으나, 레이어들은 요청응답에
      영향을 미치지 않으며 레이어 존재 유무도 몰라야 한다.
   6. 코드온디멘트 : 클라이언트는 서버에 코드를 요청하며, 리턴코드를 실행할 수 있다.
      REST(아케텍쳐)와 HTTP(프로토콜)는 다르더라도, REST를 구현할 때, HTTP를 사용하면 구현이 용이.
 GET : 주로 리소스를 가져오기 위함
 POST : 리소스에 대한 임의의 작업 수행(생성, 수정) 수행 시
 PUT : 리소스를 대체할 때 사용
 DELETE : 리소스를 삭제할 때 사용*/

  * 프로세스와 스레드의 차이
  프로그램 = 어떤 작업을 위해 실행할 수 있는 파일. 주로 HDD나 SSD에 저장
  프로세스란 CPU에 의해 실행되거나 실행준비중 상태에 들어가는 프로그램
  1.연속적으로 실행되는 컴퓨터 프로그램 2. 메모리에 올라와 실행되고 있는 프로그램의 독립적인 개체 3. 운영체제로 부터 시스템자원을 할당받는 단위
  하나의 프로세스는 독립된 메모리 영역 영억으로 구성.
    - 코드 : 프로그램의 코드 자체 (실행되기 전 CPU가 해석할수 있는 바이너리 코드 상태로 주기억장치에 저장)
    - 데이터 : 프로그램의 전역 or 정적변수 할당을 위해 존재하는 공간
    - 스택 : 지역변수 할당 및 함수호출 시 전달한 argument값 저장
    - 힙 : 동적할당(기억공간을 배정 및 회수)을 위하여 필요.
  스레드 : 프로세스의 서로 독립적인 일을 순차적으로 수행하는 불필요함을 개선하기 위한 프로세스보다 작고 독립적으로 스케쥴링이 가능한 단위.
  1. 각 스레드는 독립적이며, 실행/ 종료순서는 예측할 수 없다.
  2. 스레드는 프로그램 외부에서는 보이지 않으며, 프로그램의 스레드 수는 다른 스레드에 알려지지 않는다.
  3. 스레드는 프로세스의 일부분이기 때문에 프로세스의 자원들을 공유하지만, 그 자신의 처리시간과 스택, 레지스터들이 할당된다.
  4. 스레드들은 독립적이나, 한 스레드가 취 행동은 다른 스레드에 영향을 미침 (한 스레드의 exit() 콜을 통하여 모든 스레드 종료 가능)
  5. 스레드들은 수행을 위해 스케쥴되고, 결과들은 프로세스에 전달된다.