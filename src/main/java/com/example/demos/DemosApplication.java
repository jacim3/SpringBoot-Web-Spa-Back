package com.example.demos;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication          // 해당 클래스에 SpringBoot를 설정 및 해당 클래스가 있는 패키지를 베이스 패키지로 설정.
                                // 스프링의 주요 기능 중 하나가 의존성 주입 컨테이너로서의 기능이며, 이러한 컨테이너 오브젝트인 ApplicationContext에
                                // 빈을 등록하거나, 찾아서 주입할수 있게 한다.

                                // @Bean - 메소드 레벨에서 선언하여, 반환되는 인스턴스를 수동으로 Bean으로 등록시킴 (직접적으로 스프링에서 Bean을 관리하기 위함)
                                // @Component - 클래스 레벨에서 선언하여, @ComponentScan을 통하여 자동으로 Bean을 찾고 등록시킴.
public class DemosApplication {

    public static void main(String[] args) {
        SpringApplication.run(DemosApplication.class, args);
    }
}

// * 레이어드 아키텍쳐 패턴 - 스프링 프로젝트 내부에 어떻게 코드를 적절히 분리하고 관리할 것인지에 대한것.
//   프리젠테이션, 비즈니스, 퍼시스턴스, 데이터베이스 레이어로서 수평적으로 나누어 관리하며, 레이어는 자기보다 한단계 하위의
//   레이어만 사용이 가능하다.
// * REST 아키텍쳐 스타일 - 클라이언트(브라우저)가 서비스를 이용하려면, 어떤 형식으로 요청을 보내고 응답을 받는지
//   이러한 아키텍쳐 스타일로 설계 및 구현된 서비스를 Restful Service라고 한다.
//   1. 클라이언트-서버 : 리소스를 관리하는 서버가 존재하고, 다수의 클라이언트가 네트워크를 통해 서버에 접근하는 구조.
//   2. 상태가 없음 : 클라이언트가 서버에 요청을 보낼 때, 이전 요청의 영향을 받지 않음을 의미.
//      로그인 -> 다음페이지로 이동하는 경우는 서버가 이전 상태를 알고있어야 하므로 '상태가 있는' 아키텍쳐.
//      그러므로, 상태가 없는 아키텍쳐는 서버에 요청을 하기위해 필요한 모든 데이터를 포함해야 한다.
//   3. 캐시되는 데이터 : 서버에서 리소스를 리턴 시, 캐시가 가능한지 여부를 명시할수 있어야 함.
//   4. 일관적인 인터페이스 : 리소스를 요청하기 위한 URI 일관성 혹은, 리턴타입의 일관성 (+충분한 정보)과 같이,
//      URI 요청 응답, 요청형식 응답형식이 일관적이어야 한다.
//   5. 레이어 시스템 : 클라이언트가 서버에 요청할 때, 여러개의 레이어로 된 서버를 거칠수 있으나, 레이어들은 요청응답에
//      영향을 미치지 않으며 레이어 존재 유무도 몰라야 한다.
//   6. 코드온디멘트 : 클라이언트는 서버에 코드를 요청하며, 리턴코드를 실행할 수 있다.
//      REST(아케텍쳐)와 HTTP(프로토콜)는 다르더라도, REST를 구현할 때, HTTP를 사용하면 쉬움.
// GET : 주로 리소스를 가져오기 위함
// POST : 리소스에 대한 임의의 작업 수행(생성, 수정) 수행 시
// PUT : 리소스를 대체할 때 사용
// DELETE : 리소스를 삭제할 때 사용

// * 호스트는 네트워크에 연결하기 위하여 네트워크에 연결된 컴퓨터 혹은 그 외의 장치를 의미
// * 노드는 네트워크상에 존재하는 모든 장치를 의미
// 즉 네트워크를 이용하기 위해 주소가 할당된 노드 = 호스트
// * 클라이언트는 네트워크 상 요청하는 호스트를 의미

// * 서버는 요청에 응답할 수 있는 호스트로서, 요청하는 장치는 호스트, 요청에 응답하는 장치는 서버가 된다.
// 서버란 지정된 포트에 소켓을 열고, 클라이언트가 연결할 때 까지 무한 대기하며 기다리는 프로그램.
// 이후 클라이언트가 연결되면, 해당 클라이언트 소켓에서 요청을 받아와 수행 이후 응답을 작성해 연결함.
// 어떤 프로토콜을 사용하느냐에 따라 FTP 서버 혹은 HTTP 서버 등이 될 수 있다.

// 정적 웹 서버란 HTTP 서버 중에서 리소스 파일을 리턴하는 서버로서, 해당 파일을 별도로 처리하지 않고 있는 그대로 리턴함.
// Apache or Nginx 가 있다.

// 동적 웹 서버는 파일을 있는 그대로 리턴하는 대신, 요청을 처리한 후, 응답바디를 재구성 하거나 템플릿 파일에 결과를 대체하여 보냄.
// 이러한 작업을 스프링은 서블릿이 도와주어 소켓프로그래밍, HTTP 파싱, 스레드 풀 관리등을 수행한다.
